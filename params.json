{"name":"Easystub.js","tagline":"EasyStub.js - a simple stubbing framework for javascript","body":"# easystub.js\r\n\r\n> _EasyStub.js - a simple stubbing framework for javascript_ \r\n(EasyStub.js stubs only JSON services)\r\n\r\n\r\n---------------------------------------\r\n\r\n## Requirements\r\n\r\n- [grunt-contrib-connect](https://github.com/gruntjs/grunt-contrib-connect) ```npm install --save-dev grunt-cli```\r\n\r\n\r\n## Optionals\r\n\r\n- [CasperJS](http://docs.casperjs.org/en/latest/installation.html#installing-from-git) ```npm install -g capserjs```\r\n\r\n---------------------------------------\r\n\r\n\r\n## Composition\r\n\r\n- module for grunt-contrib-connect\r\n- CasperJS API to modify stubs from a casper test\r\n- Javascript API to modify stubs from an HTML page\r\n- NodeJS API to set a custom stub server\r\n\r\n\r\n#### Prerequisite ####\r\n\r\n> _To execute at least one time_\r\n\r\n```bash\r\nnpm install easystub.js --savedev\r\n```\r\n\r\n\r\n## module for grunt-contrib-connect ##\r\n\r\nThis module create the stub server.\r\n\r\n### Usage ###\r\n\r\n> _Add this lines in your Gruntfiles.js_\r\n\r\nExample:  \r\n```javascript\r\ngrunt.initConfig({\r\n    connect: {\r\n        dev: {\r\n            options: {\r\n                port: 8000,\r\n                middleware: function (connect) {\r\n                    return [\r\n                        connect.static(require('path').resolve('app/')),\r\n                        \r\n                        /* The following lines add Easystub server */ \r\n                        require('easystub.js').connect({\r\n                            stubsFile: 'conf/stubs.json'\r\n                        })\r\n                        /* End */\r\n                    ];\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n```\r\n\r\n### Options ###\r\n\r\n- stubsFile: path to the configuration file\r\n\r\n### Configuration file ###\r\n\r\nThe configuration file is a JSON file composed of regular expressions matching URLs and \r\nkey data to be returned in the HTTP request value.\r\n\r\nExample:  \r\n```json\r\n{\r\n    \"^/services/my-service$\": {\r\n        \"my_custom_data_1\": 123,\r\n        \"my_custom_data_2\": 456\r\n    },\r\n    \"^/services/my-second-service$\": {\r\n        \"my_custom_data_1\": 789,\r\n        \"my_custom_data_2\": 963\r\n    }\r\n}\r\n``` \r\n\r\n\r\n## CasperJS API ##\r\n\r\nWith Easystub.js API for CasperJS, you can control the data returned by the stub, from your CasperJS tests.\r\n\r\n### Functions ###\r\n\r\n- casper.startInterceptor(urlExp, data): Start or change a stub\r\n- casper.stopInterceptor(urlExp): Stop a stub\r\n\r\n### Usage ###\r\n\r\n> _Add this lines in your CasperJS test files_\r\n\r\nExample:  \r\n```javascript\r\n'use strict';\r\n\r\n// Add startInterceptor and stopInterceptor to casper\r\nrequire('../../node_modules/easystub.js/client/src/casper-interceptor.js')(\r\n    casper);\r\n\r\ncasper.test\r\n    .begin(\r\n        'Your casper test',\r\n        function (test) {\r\n            casper\r\n                .start('http://localhost:8000/index.html', function () {\r\n                \t// Load a page before use Easystub.js API\r\n                    this.waitForSelector('body', function () {});\r\n                })\r\n                .then(function () {\r\n                \t// Change values of default stubs\r\n                \tthis.startInterceptor('^/services/my-service$', {\r\n       \t \t\t\t\t\"my_custom_data_1\": 1,\r\n        \t\t\t\t\"my_custom_data_2\": 1\r\n                \t});\r\n                                \r\n                \t// Or create new stubs\r\n                \tthis.startInterceptor('^/services/my-new-service$', {\r\n                    \t\"name\": \"Hello world\"\r\n                \t});\r\n                })\r\n                .then(function () {\r\n                    // your casper tests here\r\n                })\r\n                .then(function () {\r\n                    // change values of started stub\r\n                \tthis.startInterceptor('^/services/my-service$', {\r\n       \t \t\t\t\t\"my_custom_data_1\": 2,\r\n        \t\t\t\t\"my_custom_data_2\": 2\r\n                \t});          \r\n                })\r\n                .then(function () {\r\n                    // your casper tests here\r\n                })\r\n                .then(function () {\r\n                \t// stop stubs\r\n                \tthis.stopInterceptor('^/services/my-service$');\r\n                \tthis.stopInterceptor('^/services/my-new-service$');\r\n          \t\t})\r\n          \t\t.run(function () {\r\n                    test.done();\r\n                });\r\n        });\r\n```\r\n\r\n\r\n## Javascript API ##\r\n\r\nWith Easystub.js API for Javascript, you can control the data returned by the stub, from your HTML IHM.\r\n\r\n\r\n#### Prerequisite ####\r\n\r\n> _Add this lines in your HTML file_\r\n\r\n```html\r\n<!-- load socket.io api -->\r\n<script src=\"/socket.io/socket.io.js\"></script>\r\n\r\n<!-- load Easystub.js api -->\r\n<script src=\"/easystub.js\"></script>\r\n```\r\n\r\n\r\n### Functions ###\r\n\r\n- easystub.send(urlExp, data): Start or change a stub\r\n- easystub.remove(urlExp): Stop a stub\r\n\r\n\r\n### Usage ###\r\n\r\n> _Use it in HTML or a Javascript file_\r\n\r\nExample:  \r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n\t<head>\r\n\t\t<meta charset=\"utf-8\">\r\n\t\t<title>Easystub.js test</title>\r\n\t\t\r\n\t\t<script src=\"/socket.io/socket.io.js\"></script>\r\n\t\t<script src=\"/easystub.js\"></script>\r\n\t\t\r\n\t\t<script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\r\n\t</head>\r\n\t<body>\r\n\t\t<input type=\"button\" data-action=\"change\" value=\"change\"/>\r\n\t\t<input type=\"button\" data-action=\"stop\" value=\"stop\"/>\r\n\t\t\r\n\t\t<script>\r\n\t\t\t$('[data-action=\"change\"]').click(function () {\r\n\t\t\t\teasystub.send('^/services/my-service$', {\r\n       \t \t\t\t\"my_custom_data_1\": 1,\r\n        \t\t\t\"my_custom_data_2\": 1\r\n                });\r\n\t\t\t});\r\n\r\n\t\t\t$('[data-action=\"stop\"]').click(function () {\r\n\t\t\t\teasystub.remove('^/services/my-service$');\r\n\t\t\t});\r\n\t\t</script>\r\n\t</body>\r\n</html>\r\n```\r\n\r\n\r\n## NodeJS API ##\r\n\r\nWith Easystub.js API for NodeJS, you can create and manage an Easystub.js server from NodeJS.\r\n\r\n> _Warning: Client files \"/easystub.js\" and \"/socket.io/socket.io.js\" are not share with this API_\r\n> _Warning: The default stub don't work with this API_\r\n> _Warning: The Casper API don't work with this API_\r\n\r\n### Functions ###\r\n\r\n- listen(port): Start the easystub.js server (websocket)\r\n- has(urlExp): Return if a stub is registered or not\r\n- get(urlExp): Return the data register for the gived regulary expression\r\n- getList(): Return all register stubs\r\n\r\n\r\n### Usage ###\r\n\r\nExample:  \r\n```javascript\r\nvar serverEasyStub = require('easystub.js').server;\r\nvar express = require('express');\r\nvar app = express();\r\n\r\napp.get('/my-service', function(req, res){\r\n  var stub;\r\n  \r\n  if (serverEasyStub.has('/my-service')) {\r\n  \tstub = serverEasyStub.get('/my-service');\r\n  \tres.send(stub.data);\r\n  } else {\r\n  \tres.send('hello world');\r\n  }\r\n});\r\n\r\napp.listen(3000);\r\nserverEasyStub.listen(3001);\r\n```\r\n","google":"UA-15699626-20","note":"Don't delete this file! It's used internally to help with page regeneration."}